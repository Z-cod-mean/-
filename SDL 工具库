父类
渲染静态贴图到屏幕里
void on_update(float delta) override {}
void on_render(SDL_Renderer* renderer) override
{
（系统自带）SDL_FRect 变量名 = { position.x,position.y,大小,大小 };
（系统自带）SDL_RenderCopyF(renderer, 要加载的图片变量名, nullptr, &引用变量信息);

（系统自带）SDL_Texture* 要加载的图片变量名 = nullptr;
};


===============================================================
父类
渲染动态贴图到屏幕里

void on_update(float delta) override
{
	使用动画器中的更新器
	使用动画器种的位置信息
}

void on_render(SDL_Renderer* renderer) override
{
	使用动画器中的渲染器
}

===============================================================
子类
具体实现渲染静态贴图到屏幕里
物品名(const Vector2& _position) : 父类(_position)
{
	要加载的图片变量名 = ResourcesManager::instance()->find_texture("BlueSword");
}

================================================================

子类
具体实现渲染动态图到屏幕里
物品名(const Vector2& _position) : 父类(_position)
{
	图片集里的加载器("图片名称%d", 一共几张);
	使用动画器中的加载帧丢给动画器处理（获取要处理的图片集）
	然后使用动画器中的循环器循环动画（true）
	最后设置动画帧的刷新速度（速度f）
}

===================================================================
 //创建一个画布
texture_target = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_ARGB8888, SDL_TEXTUREACCESS_TARGET, 720, 720);
//删除画布释放资源
SDL_DestroyTexture(texture_target);

SDL_SetRenderTarget(renderer, texture_target);      // 1) 把渲染目标切到 texture_target（离屏画布）
SDL_SetRenderDrawColor(renderer, 15, 15, 15, 255); // 2) 设定清屏颜色 = 深灰 (R,G,B,A)
SDL_RenderClear(renderer);                          // 3) 用该颜色清空整张画布

窗口的后备缓冲区 防止屏幕看不到为黑
SDL_SetRenderTarget(renderer, nullptr);

























